class ORB : public Feature2D
Класс осуществляет ORB (oriented BRIEF).
Алгоритм использует FAST в пирамидах, для обнаружения устойчивых ключевых точек; выбирает самые сильные особенности, используя FAST или Harris response; 
находит их ориентацию используя моменты первого порядка и вычисляет дескрипторы используя BRIEF (где координаты случайных точечных пар изменяются в соответствии с измеренной ориентацией).


Конструктор ORB 
C++: ORB::ORB(
	int nfeatures=500,  // Максимальное число хранимых функций
	float scaleFactor=1.2f,  // Коэфициент прореживания пирамиды ( больше 1)
							// scaleFactor == 2 означает классическую пирамиду, где каждый следующий уровень имеет в 4 раза меньше пикселей, чем предыдущий, но такой большой коэффициент масштабирования будет резко ухудшать показатели сопоставления.
							// С другой стороны, коэфициент близкий к 1 будет означать, что для покрытия определенного диапазона шкалы понадобится больше уровней пирамиды, что приводит к увеличению времени обработки.
	int nlevels=8,     // количество уровней пирамиды. Наименьший уровень будет иметь линейный размер равный input_image_linear_size / Pow (scaleFactor, NLEVELS).
	int edgeThreshold=31,  // размер границы для поиска отличий. Должен примерно соответсвовать параметру patchSize  
	int firstLevel=0,   // В текущей реализации равен нулю
	int WTA_K=2, 		// Число точек, которые ставит каждый элемент BRIEF дескриптора. 
						//По умолчанию используется значение 2.  
						//В этом случае в BRIEF мы берем пару случаных точек и сравниваем их яркости, так что мы получаем 0/1 ответа. 
						//Также допускается использование значений 3 и 4. 
						//Использование 3 означает, что мы берем 3 случайные точки (конечно, эти координаты точек являются случайными, но они генерируются из предопределенного набора, так что каждый элемент BRIEF  дескриптора вычисляется детерминировано от пиксельного прямоугольника), и находим точку максимальной яркости. На выходе получаем индекс точки с максимальной яркостью (0, 1 или 2). При выборе 4 случайных точек на выходе получаем (0,1,2 или 3)
	int scoreType=ORB::HARRIS_SCORE,  // По умолчанию HARRIS_SCORE означает, что алгоритм Харриса используется для ранжирования функции 
									 //(оценка записывается в Keypoint :: score и используется, чтобы сохранить лучшие черты nfeatures);  
									 // Альтарнативным значением параметра является FAST_SCORE, который вычисляет чуть меньше стабильные ключевые точки. 
									 // Однако, FAST_SCORE позволяет ускорить работу алгоритма.
	int patchSize=31           // размер патча, используемого в BRIEF  дескрипторе. На меньших слоях пирамиды воспринимаемая область изображения, покрываемая функцией, будет шире.
	
	)

ORB::operator()
Находит ключевые точки на изображении и вычисляет их дескриптор

C++: void ORB::operator()(
	InputArray image,  // входное изображениие 8 бит оттенков серого
	InputArray mask,    // Маска операции
	vector<KeyPoint>& keypoints,   // выходной вектор ключевых точек
	OutputArray descriptors,    // Выходные дескрипторы. cv::noArray() в случае, если в них нету необходимости.
	bool useProvidedKeypoints=false   // true - использование предоставленного вектора ключевых точек. False - обнаружение точек.
	) 
	
	